package main

import "fmt"

/*
Реализовать бинарный поиск встроенными методами языка.

Пусть нам дан упорядоченный массив, состоящий только из целочисленных элементов.(можно сделать для структур,
которые храним по длине ключа допустим, но для простого примера считаем для целочисленных эл-ов)
Требуется найти первую наименьшую позицию, на которой находится заданный элемент.

Если искомого элемента в массиве нет,
то двоичный поиск выдаст(в нашем случа это левосторониий двоичный поиск), минимальный элемент, больший искомого.

Алгоритм:
Идея поиска заключается в том, чтобы брать элемент посередине,
между границами, и сравнивать его с искомым.
Если искомое больше(в случае правостороннего — не меньше),чем элемент сравнения,то сужаем область поиска так,
чтобы новая левая граница была равна индексу середины предыдущей области.
В противном случае присваиваем это значение правой границе. Проделываем эту процедуру до тех пор,
пока правая граница больше левой более чем на 1.
*/

func binSearch(a []int, key int) int {
	l := -1
	r := len(a)
	for l < (r - 1) {
		m := (l + r) / 2
		if a[m] < key {
			l = m
		} else {
			r = m
		}
	}
	return r
}

func main() {
	arr := []int{2, 3, 3, 4, 5, 5, 9, 9, 9, 13, 29, 74, 100}
	res := binSearch(arr, 10)
	fmt.Println(res)
}
