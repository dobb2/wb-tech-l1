package main

import (
	"fmt"
	"sync"
)

/*
Написать программу,
которая конкурентно рассчитает значение квадратов чисел взятых из массива (2,4,6,8,10) и выведет их квадраты в stdout.

Решение:
Важно, что в условии не сказано про порядок вывода квадратов!
Конкурентность предполагает работу приложения с двумя и более задачами одновременно,
когда происходит создание нескольких процессов, выполняющихся независимо друг от друга.
Поэтому используем горутины. Чтобы все горутины успели отработать, добавим примитив синхронизации,
чтобы main не окончил раньше горутин.
Еще одну возможность по синхронизации горутин представляет использование типа sync.WaitGroup.
Этот тип позволяет определить группу горутин, которые должны выполняться вместе как одна группа.
И можно установить блокировку, которая приостановит выполнение функции, пока не завершит выполнение вся группа горутин
*/

func square(digit int, wg *sync.WaitGroup) {
	defer wg.Done()
	fmt.Println(digit * digit)
}

func main() {
	array := [5]int{2, 4, 6, 8, 10}
	wg := new(sync.WaitGroup)
	for i := range array {
		digit := array[i] // инициализируем переменную внутри итерации, чтобы в горутину попало нужное значение
		wg.Add(1)         // Увеличиваем счетчик горутин в группе(перед запуском горутины)
		go square(digit, wg)
	}

	wg.Wait() // ожидаем завершения всех горутин в группе
}
